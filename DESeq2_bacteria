#using DESeq2 tutorials 


library(DESeq2)
library(tidyverse)
library(RColorBrewer)
library(tximport)
library(ggplot2)
library(ggrepel)
library(gplots)

setwd("/Users/b12_roseibium/resequenced_05212023_final_round")

sampletype=read.csv("rose_samdata.csv")
matrix=read.table("05212023_curated_final_bac_tpm.tab", header=TRUE, row.names=1)
head(matrix)

#how many reads? 
colSums(matrix)


#convert into DESeq dataframe
type_dds=DESeqDataSetFromMatrix(countData=round(matrix), colData=sampletype, design= ~ type #:group)

hist(colSums(counts(type_dds)), breaks=4, col="grey")

colSums(counts(type_dds)) #yup, it's gone

#jump over to "Filtering and results after running the DESeq function...", if outlier detection has been performed

############# outlier detection ##############

#do this with all the samples, including algae_1.3...
vsd <- vst(type_dds, blind=FALSE)

e=ExpressionSet(assay(vsd), AnnotatedDataFrame(as.data.frame(colData(vsd))))
arrayQualityMetrics(e, intgroup=c("type"), force=T)

#so yes, starved does seem to be an outlier. 

#check the output folder, especially the html folder
#and the list of "outliers"in arrayQualityMetrics, we do have enough evidence 
#to convince us that 1-3 is an outlier, since
#only 1 section ("Between Array Comparison") indicates outliers. 

#lets create our deseq2 object again but wont omit starved because thats the only replicate for that category

################# Filtering and results after running the DESeq function #########################################

#now let's filter, at least X samples with a count of 1 or more and X is the sample size of the smallest group, so 2
#why do this? to increase speed and remove any rows with 0 counts. DESeq function natively conducts filtering
keep <- rowSums(counts(type_dds) >= 1) >= 2
type_dds <- type_dds[keep,]

#check what data looks like
colSums(counts(type_dds))#not bad, around 96X,XXX reads 

#now you can run the DESeq function, only filter before, not after --> https://support.bioconductor.org/p/65256/#65260
#run DESeq function
dds=DESeq(type_dds)


z=results(dds, contrast=list("type_monoculture_vs_coculture"))# "group_no_b12_vs_b12"))
summary(z)
sizeFactors(dds)
colSums(counts(dds))# on avg, 999,### reads


res= results(dds)
head(results(dds, tidy=TRUE))
summary(res)


hist(colSums(counts(dds)), breaks=5, col="grey")


#let's proceed with filtering since DESeq automatically took the outliers out but can revisit 
#write.csv(res, "model_algae_type_plus_treatment_res_.csv")

#make PCA plot to see if there's any sample that may be an outlier

vsdata <- vst(dds, blind=FALSE)
y=plotPCA(vsdata, intgroup=c("type", "group"), returnData = TRUE)#+ geom_point(aes(shape= bac_density, color= bac_density))+ theme_bw() #using the DESEQ2 plotPCA fxn we can
y #seems like algae 1-3 may be an outlier

percentVar <- round(100 * attr(y, "percentVar")) 

ggplot(y, aes(x = PC1, y = PC2, color = factor(group), shape = factor(type))) + 
geom_point(size = 9, aes(fill=factor(group))) + scale_shape_manual(values = c(17, 16)) + theme_bw()+
scale_color_manual(values = c("lightsalmon4", "lightsalmon", "lightsalmon3", "darkgoldenrod3")) +  
xlab(paste0("PC1: ", percentVar[1], "% variance"))+
ylab(paste0("PC2: ", percentVar[2], "% variance")) + theme(text = element_text(size = 20)) #+ geom_text(aes(label=name),vjust=2.5)
 

#to check labels --> geom_text(aes(label=name),vjust=1)+

#lets check w Cook's distances
par(mar=c(8,5,2,2))
z=boxplot(log10(assays(dds)[["cooks"]]), range=0, las=2) #yes, 1-3 is consistently higher, may take it out. 
z

#sort by pvalue
res <- res[order(res$padj),]
head(res)

#plotcounts, whatever gene you want
par(mfrow=c(2,2))

a=plotCounts(type_dds, gene="Ga0573226_01_617931_619052", intgroup=c("type","group"), returnData=TRUE) #b12
b=plotCounts(type_dds, gene="Ga0573226_01_5225870_5226508", intgroup=c ("type","group"), returnData=TRUE) #b12
c=plotCounts(type_dds, gene="Ga0573226_01_5226505_5230263", intgroup=c ("type","group"), returnData=TRUE) #b12
d=plotCounts(type_dds, gene="Ga0573226_01_5230315_5231424", intgroup=c ("type","group"), returnData=TRUE) #b12
e=plotCounts(type_dds, gene="Ga0573226_01_5231421_5231972", intgroup=c ("type","group"), returnData=TRUE) #b12



# Plotting the MOV10 normalized counts, using the samplenames (rownames of d as labels)
a1= ggplot(a, aes(x = type, y = count, color = group)) + 
  geom_point(position=position_jitter(w = 0.1,h = 0), size= 5) +
scale_color_manual(values=c("#999999", "#E69F00", "#999600"))+ 
  theme_bw() +
  ggtitle("sirohydrochlorin cobaltochelatase") +
  theme(plot.title = element_text(hjust = 0.5))+ theme(text = element_text(size = 20)) 

b1=ggplot(b, aes(x = type, y = count, color = group)) + 
  geom_point(position=position_jitter(w = 0.1,h = 0), size= 5) +
scale_color_manual(values=c("#999999", "#E69F00", "#999600"))+ 
  theme_bw() +
  ggtitle("cob(I)alamin adenosyltransferase") +
  theme(plot.title = element_text(hjust = 0.5))+ theme(text = element_text(size = 20)) 

c1=ggplot(c, aes(x = type, y = count, color = group)) + 
  geom_point(position=position_jitter(w = 0.1,h = 0), size= 5) +
scale_color_manual(values=c("#999999", "#E69F00", "#999600"))+ 
  theme_bw() +
  ggtitle("cobaltochelatase CobN") +
  theme(plot.title = element_text(hjust = 0.5))+ theme(text = element_text(size = 20)) 

d1=ggplot(d, aes(x = type, y = count, color = group)) + 
  geom_point(position=position_jitter(w = 0.1,h = 0), size= 5) +
scale_color_manual(values=c("#999999", "#E69F00", "#999600"))+ 
  theme_bw() +
  ggtitle("Cobalamin biosynthesis protein CobW") +
  theme(plot.title = element_text(hjust = 0.5))+ theme(text = element_text(size = 20)) 

e1=ggplot(e, aes(x = type, y = count, color = group)) + 
  geom_point(position=position_jitter(w = 0.1,h = 0), size= 5) +
scale_color_manual(values=c("#999999", "#E69F00", "#999600"))+ 
  theme_bw() +
  ggtitle("adenosylcobinamide kinase/phosphate") +
  theme(plot.title = element_text(hjust = 0.5))+ theme(text = element_text(size = 20)) 


f1=ggplot(f, aes(x = type, y = count, color = group)) + 
  geom_point(position=position_jitter(w = 0.1,h = 0), size= 5) +
scale_color_manual(values=c("#999999", "#E69F00"))+ 
  theme_bw() +
  ggtitle("psbA (PSII)") +
  theme(plot.title = element_text(hjust = 0.5))+ theme(text = element_text(size = 20)) 


g=plotCounts(dds, gene="TRINITY_DN114_c0_g1_i1", intgroup=c ("type","group"), returnData=TRUE)

library(ggpubr)
combined=ggarrange(a1, b1, c1, d1, e1, labels = c("A", "B", "C", "D", "E"), ncol = 2, nrow = 3)
combined


Volcano Plot
#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot"))# xlim=c(-3,3)))

# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))

#plot PCA
#First we need to transform the raw count data
#vst function will perform variance stabilizing transformation

vsdata <- vst(dds, blind=FALSE)
plotPCA(vsdata, intgroup="type")+ theme_bw() #using the DESEQ2 plotPCA fxn we can

plotMA(res)
plotDispEsts(dds)
hist(res$pvalue, breaks=20, col="grey")


#heatmap by sample distances
sampleDists=dist(t(assay(vsdata)))
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsdata$type, sep="-" )
colnames(sampleDistMatrix) <- NULL
library( "RColorBrewer" )
colours = colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
heatmap.2( sampleDistMatrix, trace="none", col=colours)

#heatmap by gene clustering
library( "genefilter" )
topVarGenes <- head( order( rowVars( assay(vsdata) ), decreasing=TRUE ), 60 )
#The heatmap becomes more interesting if we do not look at absolute expression strength but rather at
#the amount by which each gene deviates in a specific sample from the gene’s average across all samples.
#Hence, we center and scale each genes’ values across samples, and plot a heatmap.
#Beginner’s guide to using the DESeq2 package 31
heatmap.2( assay(vsdata)[ topVarGenes, ], 
trace="none", dendrogram="column",scale="row", margins=c(14,14),
col = colorRampPalette( rev(brewer.pal(9, "BrBG")) )(255))
