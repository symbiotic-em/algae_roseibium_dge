######################## Euks! the sym reads ###################

#run fastqc
fastqc *.fastq.gz

#move to your folder of choice 
#mk new dir
mkdir fastqc_html

mv *fastqc* /fastqc_html
-S 
#remove adapters
bbduk.sh -Xmx4g in=input_file1.fastq.gz out=output_file1.fastq.gz ref=adapters

#run fastqc and verify the adapters are all gone 
#run fastqc
fastqc *.fastq.gz

#now trim rRNA using the ribokmers.fa.gz https://www.biostars.org/p/159959/, but there shouldn't be any since these were poly-A tail selected 

bbduk.sh -Xmx4g threads=12 in=input_SSA01.fastq.gz out=input_SSA01.fq.gz ref=ribokmers.fa.gz

#index transcriptome
salmon index -t SSA01_assembly_longest_20180726.fa -i sym_transcriptome_index

#quantify reads (-SF flag for -l or --libType because our reads are stranded and come from the forward strand)
salmon quant -i sym_transcriptome_index  -l SF -r clean_1-1_SSA01.fastq.gz --validateMappings -o out

#repeat this for every file or write a forloop or .sh to submit as sbatch

############### putting all the counts and samples together ##########################

#bash script to combine all counts together into one count table
#prompt: generate a sequence table from salmon quant files with gene name as rows, tpm as columns and include file names for TPM

#answer: Here's a possible Perl script to generate a sequence table from Salmon quant files with gene name as rows, TPM as columns, and file names for TPM:

perl




#!/usr/bin/env perl

use strict;
use warnings;

my %gene_tpm; # hash to store TPM values for each gene and file

# loop through all the input files
foreach my $file (@ARGV) {
    open(my $fh, '<', $file) or die "Error: cannot open file '$file': $!\n";
    my $header = <$fh>; # skip the header line
    while (my $line = <$fh>) {
        chomp $line;
        my ($gene, $length, $tpm) = (split /\t/, $line)[0, 1, 3];
        $gene_tpm{$gene}{$file} = $tpm; # store TPM value for this gene and file
    }
    close($fh);
}

# print the output table header
print "Gene\t", join("\t", @ARGV), "\n";

# loop through all the genes
foreach my $gene (sort keys %gene_tpm) {
    print "$gene";
    # loop through all the input files to get the TPM values for this gene
    foreach my $file (@ARGV) {
        if (exists $gene_tpm{$gene}{$file}) {
            print "\t", $gene_tpm{$gene}{$file};
        } else {
            print "\t0";
        }
    }
    print "\n";
}


#USAGE --> perl salmon_seq_table.pl *quant.sf ... > output_table.txt
#This will generate a sequence table with gene name as rows, TPM values as columns, and the file names as headers for the TPM columns.


